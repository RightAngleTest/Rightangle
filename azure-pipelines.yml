stages:
 - stage: BuildStage
   displayName: Build
   jobs:
   - job: BuildJob

     steps:
     - task: MSBuild@1
       displayName: 'Build solution **/*.sln'

     - task: CopyFiles@2
       displayName: Copy binaries Files
       inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
         **\Output\client\Metroplex*.dll
         **\Output\common\Metroplex*.dll
         **\Output\server\Metroplex*.dll
         **\Libraries\*.dll
        TargetFolder: '$(Build.ArtifactStagingDirectory)\$(Build.DefinitionName)\binaries'
        OverWrite: true

- stage: Deploy
  trigger:
 - none
 
pool:
  name: Default
  demands:
  - msbuild
stages:

 
 - stage: DeployInternalRA
   dependsOn: BuildStage
   condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
   variables:
   - group: RightAngleInternal
   
   jobs:
   -  - deployment:
      displayName: AppServers
      pool:
      name: Default
     vmImage: windows-latest
    environment:
      name:  ${{parameters.environment}}
      resourceType: VirtualMachine
      tags: AppServers
    strategy:
      runOnce:
        deploy:
         steps:
              - task: PowerShell@2
                condition: ne('${{ parameters.AppPool }}', '')
                displayName: Stop App Pools
                inputs:
                 targetType: 'inline'
                 script: |
                   # Write your PowerShell commands here.
                   # SET AppPool Name
                   import-module webadministration
                   $AppPoolName = '${{parameters.AppPool}}'
                   $timeout = New-TimeSpan -Seconds 10
                   $sw = [diagnostics.stopwatch]::StartNew()
                   $startCommandExecuted = 'false'
                   while((Get-WebAppPoolState($AppPoolName)).Value -ne "Stopped")
                   {
                   try
                   {
                   Write-Host "Attempting to stop App Pool " $AppPoolName
                   if($startCommandExecuted -eq 'false')
                   {
                   Stop-WebAppPool $AppPoolName
                   $startCommandExecuted = 'true'
                   }
                   }
                   catch
                   {
                   Write-Host $_.Exception.Message
                   }
                   finally
                   {
                   Write-Host 'Waiting for' $AppPoolName ' to stop'
                   Start-Sleep -Seconds 2
                   Write-host 'Status of' $AppPoolName 'is' (Get-WebAppPoolState($AppPoolName)).Value
                   if($sw.Elapsed -gt $timeout)
                   {
                   throw 'Timed Out'
                   }
                   }
                   }
     parameters:
      environment: 'RightAngle-Internal'
      ServerTargetFolder: 'C:\Program Files (x86)\ION RightAngle\21.1.Dev2'
      AppPool: 'RightAngle.21.1.Dev2'
      basehosturl: $(basehosturl)
      licenseurl: $(licenseurl)
   - jobs:
   - deployment: 
     displayName: ServiceMonitor
     pool:
      name: Default
      vmImage: windows-latest
     environment:
       name: ${{parameters.environment}}
       resourceType: VirtualMachine
       tags: ServiceMonitor
     strategy:
       runOnce:
         deploy:
          steps:
              - task: PowerShell@2
                displayName: Stop SM's Services
                condition: ne('${{ parameters.SM }}', '')
                inputs:
                  targetType: 'inline'
                  script: |
                    $Services = '${{parameters.SM}}'
                    $startCommandExecuted = 'false'
                    $ServiceName = $Services.Split(",")
                    $timeout = New-TimeSpan -Seconds 60
                    $sw = [diagnostics.stopwatch]::StartNew()
                    foreach($service in $ServiceName)
                    {
                    $serviceInfo = Get-Service -Name $service
                    while ($serviceInfo.Status -ne 'Stopped' -AND $serviceInfo.length -gt 0) 
                    {
                    try
                    {
                    Write-host "Trying to stop service monitor" $serviceInfo.Name
                    if ($startCommandExecuted -eq 'false')
                    {
                    Stop-Service $serviceInfo.Name
                    $startCommandExecuted = 'true'
                    }
                    }
                    catch
                    {
                    Write-Output $_.Exception.Message
                    }
                    finally
                    {
                    $serviceInfo.Refresh()
                    Write-host 'Status' $serviceInfo.Name 'is ' $serviceInfo.Status
                    Start-Sleep -Seconds 2
                    if ($sw.Elapsed -gt $timeout)
                    {
                    throw 'Time Out'
                    }
                    }
                    }
                    }
     parameters:
      environment: 'RightAngle-Internal'
      ServerTargetFolder: 'C:\Program Files (x86)\ION RightAngle\21.1.Dev2\Server'
      ClientTargetFolder: 'C:\Program Files (x86)\ION RightAngle\21.1.Dev2\Client'
      SM: SRAMsgSvc21.1.Dev2
      SMProcessName: ServiceMonitor.Dev2
   - jobs:
   - deployment: 
     displayName: VDI
     pool:
      name: Default
      vmImage: windows-latest
     environment:
       name: ${{parameters.environment}}
       resourceType: VirtualMachine
       tags: Vdi
     strategy:
       runOnce:
         deploy:
          steps:
          - task: PowerShell@2
            displayName: Killing RightAngle session
            inputs:
              targetType: 'inline'
              script: |
                $sessionName = '${{parameters.sessionName}}'
                $sessionInfo= Get-Process -Name $sessionName -ErrorAction SilentlyContinue  
                $timeout = New-TimeSpan -Seconds 10
                $sw = [diagnostics.stopwatch]::StartNew()
                              
                try
                {
                if($sessionInfo.Length -gt 0)
                {
                Write-Host "Killing RightAngle session " $sessionInfo.Name
                Get-Process -Name $sessionName | Stop-Process -Force -processname {$_.ProcessName}
                Write-Host "Killed RightAngle session for the Ids" $sessionInfo.Id
                Start-Sleep -Seconds 2
                $sessionInfo1= Get-Process -Name $sessionName -ErrorAction SilentlyContinue
                while($sessionInfo1.Length -gt 0)
                {
                Write-Host "Trying to Kill the Session "
                Start-Sleep -Seconds 2
                if ($sw.Elapsed -gt $timeout)
                {
                Throw "Time Out"
                }
                }
                }
                }
                catch
                {
                Write-Output $_.Exception.Message
                Throw
                }
     parameters:
      environment: 'RightAngle-Internal'
      ClientTargetFolder: 'C:\Program Files (x86)\ION RightAngle\21.1.Dev2\Client'
      sessionName: 'Rightangle.Dev2'
      - task: PowerShell@2
                displayName: Start App Pools
                condition:  ne('${{ parameters.AppPool }}', '')
                inputs:
                 targetType: 'inline'
                 script: |
                   # Write your PowerShell commands here.
                   # SET AppPool Name
                   import-module webadministration
                   $AppPoolName = '${{parameters.AppPool}}'
                   $timeout = New-TimeSpan -Seconds 10
                   $sw = [diagnostics.stopwatch]::StartNew()
                   $startCommandExecuted = 'false'
                   while((Get-WebAppPoolState($AppPoolName)).Value -ne "Started")
                   {
                   try
                   {
                   Write-Host "Attempting to start App Pool " $AppPoolName  
                   if($startCommandExecuted -eq 'false')
                   {
                   Start-WebAppPool $AppPoolName
                   $startCommandExecuted = 'true'
                   }
                   }
                   catch
                   {
                   Write-Host $_.Exception.Message
                   }
                   finally
                   {
                   Write-Host 'Waiting for' $AppPoolName ' to start'
                   Start-Sleep -Seconds 2
                   Write-host 'Status of' $AppPoolName 'is' (Get-WebAppPoolState($AppPoolName)).Value
                   if($sw.Elapsed -gt $timeout)
                   {
                   throw 'Timed Out'
                   }
                   }
                   }
     - task: PowerShell@2
                displayName: Start SM's
                condition: ne('${{ parameters.SM }}', '')
                inputs:
                  targetType: 'inline'
                  script: |
                    # Write your PowerShell commands here.
                    $Services = '${{parameters.SM}}'
                    $startCommandExecuted = 'false'
                    $ServiceName = $Services.Split(",")
                    $timeout = New-TimeSpan -Seconds 60
                    $sw = [diagnostics.stopwatch]::StartNew()
                    foreach($service in $ServiceName)
                    {
                    $serviceInfo = Get-Service -Name $service
                    while ($serviceInfo.Status -ne 'Running' -AND $serviceInfo.length -gt 0) 
                    {
                    try
                    {
                    Write-host "Trying to start service monitor" $serviceInfo.Name
                    if ($startCommandExecuted -eq 'false') 
                    {
                    Start-Service $serviceInfo.Name
                    $startCommandExecuted = 'true'
                    }
                    }
                    catch
                    {
                    Write-Output $_.Exception.Message
                    }
                    finally
                    {
                    $serviceInfo.Refresh()
                    Write-host 'Status' $serviceInfo.Name 'is ' $serviceInfo.Status
                    Start-Sleep -Seconds 2
                    if ($sw.Elapsed -gt $timeout) 
                    {
                    throw 'Time Out'
                    }
                    }
                    }
                    }
      
      
      
      
    
